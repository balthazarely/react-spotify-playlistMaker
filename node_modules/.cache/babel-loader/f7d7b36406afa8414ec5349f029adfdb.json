{"ast":null,"code":"const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n\n  searchArtists(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=artist`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      return jsonResponse;\n    });\n  },\n\n  getSimilarArtists(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      return jsonResponse;\n    });\n  },\n\n  getTopSongs(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/top-tracks?market=ES`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      // console.log(jsonResponse);\n      let filteredResponse = jsonResponse.tracks.map(track => ({\n        name: track.id,\n        uri: track.uri\n      }));\n      return filteredResponse.slice(0, 4);\n    });\n  },\n\n  //   search(searchTerm) {\n  //     const accessToken = Spotify.getAccessToken();\n  //     const headers = {\n  //       Authorization: `Bearer ${accessToken}`,\n  //     };\n  //     return fetch(`https://api.spotify.com/v1/search?q=Muse&type=artist`, {\n  //       headers: headers,\n  //     })\n  //       .then(\n  //         (response) => {\n  //           if (response.ok) {\n  //             return response.json();\n  //           }\n  //           throw new Error(\"Request failed!\");\n  //         },\n  //         (networkError) => {\n  //           console.log(networkError.message);\n  //         }\n  //       )\n  //       .then((jsonResponse) => {\n  //         // if (!jsonResponse.tracks) {\n  //         //   return [];\n  //         // }\n  //         return jsonResponse.tracks.items.map((track) => ({\n  //           id: track.id,\n  //           name: track.name,\n  //           artist: track.artists[0].name,\n  //           album: track.album.name,\n  //           uri: track.uri,\n  //         }));\n  //       });\n  //   },\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", {\n        headers: headers\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(\"Request failed!\");\n      }, networkError => {\n        console.log(networkError.message);\n      }).then(jsonResponse => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(\"Request failed!\");\n        }, networkError => {\n          console.log(networkError.message);\n        }).then(jsonResponse => {\n          playlistID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              uris: trackURIs\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n\n            throw new Error(\"Request failed!\");\n          }, networkError => {\n            console.log(networkError.message);\n          }).then(jsonResponse => jsonResponse);\n        });\n      });\n    } else {\n      return;\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/balthazarely/Desktop/Development/Projects/balthazar-music-memoery/src/utils/spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","console","log","newAccessToken","window","location","href","match","newExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","searchArtists","searchTerm","headers","Authorization","fetch","then","response","ok","json","Error","networkError","message","jsonResponse","getSimilarArtists","id","getTopSongs","filteredResponse","tracks","map","track","name","uri","slice","getMyDetails","savePlaylist","playlistName","trackURIs","length","userID","playlistID","method","body","JSON","stringify","uris"],"mappings":"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","sourcesContent":["const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n\n  searchArtists(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      `https://api.spotify.com/v1/search?q=${searchTerm}&type=artist`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        return jsonResponse;\n      });\n  },\n\n  getSimilarArtists(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\n      headers: headers,\n    })\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        return jsonResponse;\n      });\n  },\n  getTopSongs(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      `https://api.spotify.com/v1/artists/${id}/top-tracks?market=ES`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        // console.log(jsonResponse);\n        let filteredResponse = jsonResponse.tracks.map((track) => ({\n          name: track.id,\n          uri: track.uri,\n        }));\n        return filteredResponse.slice(0, 4);\n      });\n  },\n  //   search(searchTerm) {\n  //     const accessToken = Spotify.getAccessToken();\n  //     const headers = {\n  //       Authorization: `Bearer ${accessToken}`,\n  //     };\n  //     return fetch(`https://api.spotify.com/v1/search?q=Muse&type=artist`, {\n  //       headers: headers,\n  //     })\n  //       .then(\n  //         (response) => {\n  //           if (response.ok) {\n  //             return response.json();\n  //           }\n  //           throw new Error(\"Request failed!\");\n  //         },\n  //         (networkError) => {\n  //           console.log(networkError.message);\n  //         }\n  //       )\n  //       .then((jsonResponse) => {\n  //         // if (!jsonResponse.tracks) {\n  //         //   return [];\n  //         // }\n  //         return jsonResponse.tracks.items.map((track) => ({\n  //           id: track.id,\n  //           name: track.name,\n  //           artist: track.artists[0].name,\n  //           album: track.album.name,\n  //           uri: track.uri,\n  //         }));\n\n  //       });\n  //   },\n\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers }).then(\n      (response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(\"Request failed!\");\n      },\n      (networkError) => {\n        console.log(networkError.message);\n      }\n    );\n  },\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`,\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n        .then(\n          (response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(\"Request failed!\");\n          },\n          (networkError) => {\n            console.log(networkError.message);\n          }\n        )\n        .then((jsonResponse) => {\n          userID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({ name: playlistName }),\n          })\n            .then(\n              (response) => {\n                if (response.ok) {\n                  return response.json();\n                }\n                throw new Error(\"Request failed!\");\n              },\n              (networkError) => {\n                console.log(networkError.message);\n              }\n            )\n            .then((jsonResponse) => {\n              playlistID = jsonResponse.id;\n              return fetch(\n                `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\n                {\n                  method: \"POST\",\n                  headers: headers,\n                  body: JSON.stringify({ uris: trackURIs }),\n                }\n              )\n                .then(\n                  (response) => {\n                    if (response.ok) {\n                      return response.json();\n                    }\n                    throw new Error(\"Request failed!\");\n                  },\n                  (networkError) => {\n                    console.log(networkError.message);\n                  }\n                )\n                .then((jsonResponse) => jsonResponse);\n            });\n        });\n    } else {\n      return;\n    }\n  },\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}