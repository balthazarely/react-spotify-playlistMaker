{"ast":null,"code":"const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n\n  search(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: headers\n    }).then(response => {\n      let results = response.json();\n      return results;\n    });\n  },\n\n  //   search(searchTerm) {\n  //     const accessToken = Spotify.getAccessToken();\n  //     const headers = {\n  //       Authorization: `Bearer ${accessToken}`,\n  //     };\n  //     return fetch(\n  //       `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n  //       { headers: headers }\n  //     )\n  //       .then(\n  //         (response) => {\n  //           if (response.ok) {\n  //             return response.json();\n  //           }\n  //           throw new Error(\"Request failed!\");\n  //         },\n  //         (networkError) => {\n  //           console.log(networkError.message);\n  //         }\n  //       )\n  //       .then((jsonResponse) => {\n  //         if (!jsonResponse.tracks) {\n  //           return [];\n  //         }\n  //         return jsonResponse.tracks.items.map((track) => ({\n  //           id: track.id,\n  //           name: track.name,\n  //           artist: track.artists[0].name,\n  //           album: track.album.name,\n  //           uri: track.uri,\n  //         }));\n  //       });\n  //   },\n  findSimilar(artistID) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    console.log(\"starting to serach\");\n    return fetch(`https://api.spotify.com/v1/artist/${artistID}/top-tracks`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"response good!\");\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      console.log(\"returning empty array!\");\n\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", {\n        headers: headers\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(\"Request failed!\");\n      }, networkError => {\n        console.log(networkError.message);\n      }).then(jsonResponse => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(\"Request failed!\");\n        }, networkError => {\n          console.log(networkError.message);\n        }).then(jsonResponse => {\n          playlistID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              uris: trackURIs\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n\n            throw new Error(\"Request failed!\");\n          }, networkError => {\n            console.log(networkError.message);\n          }).then(jsonResponse => jsonResponse);\n        });\n      });\n    } else {\n      return;\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/balthazarely/Desktop/Development/Projects/balthazar-music-memoery/src/utils/spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","console","log","newAccessToken","window","location","href","match","newExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","searchTerm","headers","Authorization","fetch","then","response","results","json","findSimilar","artistID","ok","Error","networkError","message","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","getMyDetails","savePlaylist","playlistName","trackURIs","length","userID","playlistID","method","body","JSON","stringify","uris"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,cAAc,GAAG;AACf,QAAIF,WAAJ,EAAiB;AACfG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,aAAOA,WAAP;AACD;;AAED,UAAMK,cAAc,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAvB;AACA,UAAMC,YAAY,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAArB;;AACA,QAAIJ,cAAc,IAAIK,YAAtB,EAAoC;AAClCV,MAAAA,WAAW,GAAGK,cAAc,CAAC,CAAD,CAA5B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,YAAY,CAAC,CAAD,CAAb,CAAxB;AACAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAOb,WAAW,GAAG,EAAvC,EAA4CW,SAAS,GAAG,IAAxD;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACA,aAAOA,WAAP;AACD,KAPD,MAOO;AACL,YAAMgB,SAAS,GAAI,oDAAmDlB,QAAS,mFAAkFC,WAAY,EAA7K;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAM,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACD;AACF,GArBa;;AAuBdC,EAAAA,MAAM,CAACC,UAAD,EAAa;AACjB,UAAMlB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMiB,OAAO,GAAG;AACdC,MAAAA,aAAa,EAAG,UAASpB,WAAY;AADvB,KAAhB;AAGA,WAAOqB,KAAK,CACT,kDAAiDH,UAAW,EADnD,EAEV;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAFU,CAAL,CAGLG,IAHK,CAGCC,QAAD,IAAc;AACnB,UAAIC,OAAO,GAAGD,QAAQ,CAACE,IAAT,EAAd;AACA,aAAOD,OAAP;AACD,KANM,CAAP;AAOD,GAnCa;;AAqCd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,UAAM3B,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMiB,OAAO,GAAG;AACdC,MAAAA,aAAa,EAAG,UAASpB,WAAY;AADvB,KAAhB;AAGAG,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA,WAAOiB,KAAK,CAAE,qCAAoCM,QAAS,aAA/C,EAA6D;AACvER,MAAAA,OAAO,EAAEA;AAD8D,KAA7D,CAAL,CAGJG,IAHI,CAIFC,QAAD,IAAc;AACZ,UAAIA,QAAQ,CAACK,EAAb,EAAiB;AACfzB,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,eAAOmB,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,YAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD,KAVE,EAWFC,YAAD,IAAkB;AAChB3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,YAAY,CAACC,OAAzB;AACD,KAbE,EAeJT,IAfI,CAeEU,YAAD,IAAkB;AACtB7B,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,UAAI,CAAC4B,YAAY,CAACC,MAAlB,EAA0B;AACxB,eAAO,EAAP;AACD;;AACD,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA+BC,KAAD,KAAY;AAC/CC,QAAAA,EAAE,EAAED,KAAK,CAACC,EADqC;AAE/CC,QAAAA,IAAI,EAAEF,KAAK,CAACE,IAFmC;AAG/CC,QAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHsB;AAI/CG,QAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJ4B;AAK/CI,QAAAA,GAAG,EAAEN,KAAK,CAACM;AALoC,OAAZ,CAA9B,CAAP;AAOD,KA3BI,CAAP;AA4BD,GAzGa;;AA2GdC,EAAAA,YAAY,GAAG;AACb,UAAM3C,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,UAAMiB,OAAO,GAAG;AACdC,MAAAA,aAAa,EAAG,UAASpB,WAAY;AADvB,KAAhB;AAGA,WAAOqB,KAAK,CAAC,+BAAD,EAAkC;AAAEF,MAAAA,OAAO,EAAEA;AAAX,KAAlC,CAAL,CAA6DG,IAA7D,CACJC,QAAD,IAAc;AACZ,UAAIA,QAAQ,CAACK,EAAb,EAAiB;AACf,eAAOL,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,YAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD,KANI,EAOJC,YAAD,IAAkB;AAChB3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,YAAY,CAACC,OAAzB;AACD,KATI,CAAP;AAWD,GA3Ha;;AA4Hda,EAAAA,YAAY,CAACC,YAAD,EAAeC,SAAf,EAA0B;AACpC,QAAID,YAAY,IAAIC,SAAS,CAACC,MAA9B,EAAsC;AACpC,YAAM/C,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;AACA,YAAMiB,OAAO,GAAG;AACdC,QAAAA,aAAa,EAAG,UAASpB,WAAY;AADvB,OAAhB;AAGA,UAAIgD,MAAJ;AACA,UAAIC,UAAJ;AACA,aAAO5B,KAAK,CAAC,+BAAD,EAAkC;AAAEF,QAAAA,OAAO,EAAEA;AAAX,OAAlC,CAAL,CACJG,IADI,CAEFC,QAAD,IAAc;AACZ,YAAIA,QAAQ,CAACK,EAAb,EAAiB;AACf,iBAAOL,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,cAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD,OAPE,EAQFC,YAAD,IAAkB;AAChB3B,QAAAA,OAAO,CAACC,GAAR,CAAY0B,YAAY,CAACC,OAAzB;AACD,OAVE,EAYJT,IAZI,CAYEU,YAAD,IAAkB;AACtBgB,QAAAA,MAAM,GAAGhB,YAAY,CAACK,EAAtB;AACA,eAAOhB,KAAK,CAAE,oCAAmC2B,MAAO,YAA5C,EAAyD;AACnEE,UAAAA,MAAM,EAAE,MAD2D;AAEnE/B,UAAAA,OAAO,EAAEA,OAF0D;AAGnEgC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEf,YAAAA,IAAI,EAAEO;AAAR,WAAf;AAH6D,SAAzD,CAAL,CAKJvB,IALI,CAMFC,QAAD,IAAc;AACZ,cAAIA,QAAQ,CAACK,EAAb,EAAiB;AACf,mBAAOL,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,gBAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD,SAXE,EAYFC,YAAD,IAAkB;AAChB3B,UAAAA,OAAO,CAACC,GAAR,CAAY0B,YAAY,CAACC,OAAzB;AACD,SAdE,EAgBJT,IAhBI,CAgBEU,YAAD,IAAkB;AACtBiB,UAAAA,UAAU,GAAGjB,YAAY,CAACK,EAA1B;AACA,iBAAOhB,KAAK,CACT,oCAAmC2B,MAAO,cAAaC,UAAW,SADzD,EAEV;AACEC,YAAAA,MAAM,EAAE,MADV;AAEE/B,YAAAA,OAAO,EAAEA,OAFX;AAGEgC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,cAAAA,IAAI,EAAER;AAAR,aAAf;AAHR,WAFU,CAAL,CAQJxB,IARI,CASFC,QAAD,IAAc;AACZ,gBAAIA,QAAQ,CAACK,EAAb,EAAiB;AACf,qBAAOL,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,kBAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AACD,WAdE,EAeFC,YAAD,IAAkB;AAChB3B,YAAAA,OAAO,CAACC,GAAR,CAAY0B,YAAY,CAACC,OAAzB;AACD,WAjBE,EAmBJT,IAnBI,CAmBEU,YAAD,IAAkBA,YAnBnB,CAAP;AAoBD,SAtCI,CAAP;AAuCD,OArDI,CAAP;AAsDD,KA7DD,MA6DO;AACL;AACD;AACF;;AA7La,CAAhB;AAgMA,eAAe/B,OAAf","sourcesContent":["const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n\n  search(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n      { headers: headers }\n    ).then((response) => {\n      let results = response.json();\n      return results;\n    });\n  },\n\n  //   search(searchTerm) {\n  //     const accessToken = Spotify.getAccessToken();\n  //     const headers = {\n  //       Authorization: `Bearer ${accessToken}`,\n  //     };\n  //     return fetch(\n  //       `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n  //       { headers: headers }\n  //     )\n  //       .then(\n  //         (response) => {\n  //           if (response.ok) {\n  //             return response.json();\n  //           }\n  //           throw new Error(\"Request failed!\");\n  //         },\n  //         (networkError) => {\n  //           console.log(networkError.message);\n  //         }\n  //       )\n  //       .then((jsonResponse) => {\n  //         if (!jsonResponse.tracks) {\n  //           return [];\n  //         }\n  //         return jsonResponse.tracks.items.map((track) => ({\n  //           id: track.id,\n  //           name: track.name,\n  //           artist: track.artists[0].name,\n  //           album: track.album.name,\n  //           uri: track.uri,\n  //         }));\n  //       });\n  //   },\n  findSimilar(artistID) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    console.log(\"starting to serach\");\n\n    return fetch(`https://api.spotify.com/v1/artist/${artistID}/top-tracks`, {\n      headers: headers,\n    })\n      .then(\n        (response) => {\n          if (response.ok) {\n            console.log(\"response good!\");\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        console.log(\"returning empty array!\");\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers }).then(\n      (response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(\"Request failed!\");\n      },\n      (networkError) => {\n        console.log(networkError.message);\n      }\n    );\n  },\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`,\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n        .then(\n          (response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(\"Request failed!\");\n          },\n          (networkError) => {\n            console.log(networkError.message);\n          }\n        )\n        .then((jsonResponse) => {\n          userID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({ name: playlistName }),\n          })\n            .then(\n              (response) => {\n                if (response.ok) {\n                  return response.json();\n                }\n                throw new Error(\"Request failed!\");\n              },\n              (networkError) => {\n                console.log(networkError.message);\n              }\n            )\n            .then((jsonResponse) => {\n              playlistID = jsonResponse.id;\n              return fetch(\n                `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\n                {\n                  method: \"POST\",\n                  headers: headers,\n                  body: JSON.stringify({ uris: trackURIs }),\n                }\n              )\n                .then(\n                  (response) => {\n                    if (response.ok) {\n                      return response.json();\n                    }\n                    throw new Error(\"Request failed!\");\n                  },\n                  (networkError) => {\n                    console.log(networkError.message);\n                  }\n                )\n                .then((jsonResponse) => jsonResponse);\n            });\n        });\n    } else {\n      return;\n    }\n  },\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}