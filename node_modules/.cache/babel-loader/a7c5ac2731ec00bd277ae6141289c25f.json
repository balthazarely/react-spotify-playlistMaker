{"ast":null,"code":"const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n\n  searchArtists(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=artist`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      return jsonResponse;\n    });\n  },\n\n  getSimilarArtists(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      return jsonResponse;\n    });\n  },\n\n  getTopSongs(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/top-tracks?market=ES`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      // console.log(jsonResponse);\n      let filteredResponse = jsonResponse.tracks.map(track => ({\n        uri: track.uri\n      }));\n      return filteredResponse.slice(0, 4);\n    });\n  },\n\n  getUsersTopArtists() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(` https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=30&offset=0`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      return jsonResponse.items;\n      console.log(jsonResponse);\n    });\n  },\n\n  getUsersTopTracks() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(` https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=30&offset=0`, {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    }).then(jsonResponse => {\n      console.log(jsonResponse, \"TOP SONGS\");\n      return jsonResponse.items;\n    });\n  },\n\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\"Request failed!\");\n    }, networkError => {\n      console.log(networkError.message);\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", {\n        headers: headers\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        throw new Error(\"Request failed!\");\n      }, networkError => {\n        console.log(networkError.message);\n      }).then(jsonResponse => {\n        userID = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: \"POST\",\n          headers: headers,\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(\"Request failed!\");\n        }, networkError => {\n          console.log(networkError.message);\n        }).then(jsonResponse => {\n          playlistID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({\n              uris: trackURIs\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n\n            throw new Error(\"Request failed!\");\n          }, networkError => {\n            console.log(networkError.message);\n          }).then(jsonResponse => jsonResponse);\n        });\n      });\n    } else {\n      return;\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/balthazarely/Desktop/Development/Projects/react-spotify-playlistMaker/src/utils/spotify.js"],"names":["clientId","redirectUri","accessToken","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","Spotify","getAccessToken","console","log","newAccessToken","window","location","href","match","newExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","searchArtists","searchTerm","headers","Authorization","fetch","then","response","ok","json","Error","networkError","message","jsonResponse","getSimilarArtists","id","getTopSongs","filteredResponse","tracks","map","track","uri","slice","getUsersTopArtists","items","getUsersTopTracks","getMyDetails","savePlaylist","playlistName","trackURIs","userID","playlistID","method","body","JSON","stringify","name","uris"],"mappings":"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","sourcesContent":["const clientId = \"75512e8899a34ca7a0dce9fb97ef9eab\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      console.log(accessToken);\n      return accessToken;\n    }\n\n    const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n    if (newAccessToken && newExpiresIn) {\n      accessToken = newAccessToken[1];\n      const expiresIn = Number(newExpiresIn[1]);\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      console.log(accessToken);\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirectUri}`;\n      console.log(accessToken);\n      window.location = accessUrl;\n    }\n  },\n  searchArtists(searchTerm) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      `https://api.spotify.com/v1/search?q=${searchTerm}&type=artist`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        return jsonResponse;\n      });\n  },\n\n  getSimilarArtists(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(`https://api.spotify.com/v1/artists/${id}/related-artists`, {\n      headers: headers,\n    })\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        return jsonResponse;\n      });\n  },\n  getTopSongs(id) {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      `https://api.spotify.com/v1/artists/${id}/top-tracks?market=ES`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        // console.log(jsonResponse);\n        let filteredResponse = jsonResponse.tracks.map((track) => ({\n          uri: track.uri,\n        }));\n        return filteredResponse.slice(0, 4);\n      });\n  },\n\n  getUsersTopArtists() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      ` https://api.spotify.com/v1/me/top/artists?time_range=short_term&limit=30&offset=0`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        return jsonResponse.items;\n        console.log(jsonResponse);\n      });\n  },\n  getUsersTopTracks() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\n      ` https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=30&offset=0`,\n      {\n        headers: headers,\n      }\n    )\n      .then(\n        (response) => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(\"Request failed!\");\n        },\n        (networkError) => {\n          console.log(networkError.message);\n        }\n      )\n      .then((jsonResponse) => {\n        console.log(jsonResponse, \"TOP SONGS\");\n        return jsonResponse.items;\n      });\n  },\n\n  getMyDetails() {\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`,\n    };\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers }).then(\n      (response) => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(\"Request failed!\");\n      },\n      (networkError) => {\n        console.log(networkError.message);\n      }\n    );\n  },\n  savePlaylist(playlistName, trackURIs) {\n    if (playlistName && trackURIs.length) {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`,\n      };\n      let userID;\n      let playlistID;\n      return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n        .then(\n          (response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(\"Request failed!\");\n          },\n          (networkError) => {\n            console.log(networkError.message);\n          }\n        )\n        .then((jsonResponse) => {\n          userID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify({ name: playlistName }),\n          })\n            .then(\n              (response) => {\n                if (response.ok) {\n                  return response.json();\n                }\n                throw new Error(\"Request failed!\");\n              },\n              (networkError) => {\n                console.log(networkError.message);\n              }\n            )\n            .then((jsonResponse) => {\n              playlistID = jsonResponse.id;\n              return fetch(\n                `https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\n                {\n                  method: \"POST\",\n                  headers: headers,\n                  body: JSON.stringify({ uris: trackURIs }),\n                }\n              )\n                .then(\n                  (response) => {\n                    if (response.ok) {\n                      return response.json();\n                    }\n                    throw new Error(\"Request failed!\");\n                  },\n                  (networkError) => {\n                    console.log(networkError.message);\n                  }\n                )\n                .then((jsonResponse) => jsonResponse);\n            });\n        });\n    } else {\n      return;\n    }\n  },\n};\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}