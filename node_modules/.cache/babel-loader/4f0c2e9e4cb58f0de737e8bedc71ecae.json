{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/balthazarely/Desktop/Development/Projects/react-spotify-playlistMaker/src/components/SliderWindow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Input, Loader } from \"semantic-ui-react\";\nexport default function SliderWindow({\n  getTopSongsSimilarArtists,\n  sliderWindowOpen,\n  setSliderWindowOpen\n}) {\n  _s();\n\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const [processingPlaylist, setProcessingPlaylist] = useState(false);\n  const [activeLoader, setActiveLoader] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `slider-container ${sliderWindowOpen ? \"slider-open\" : \"\"}`,\n    children: processingPlaylist ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-after\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        active: true,\n        inline: \"centered\",\n        size: \"big\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-before\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please name playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        fluid: true,\n        placeholder: \"Playlist name\",\n        size: \"medium\",\n        onChange: e => setPlaylistName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn success\",\n          onClick: () => {\n            getTopSongsSimilarArtists(playlistName);\n            setProcessingPlaylist(true);\n            setActiveLoader(true);\n          },\n          children: \"Make Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn cancle\",\n          onClick: () => setSliderWindowOpen(false),\n          children: \"cancle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n} // export default function SearchInput({ searchHandler, searchArtists }) {\n//   const handleEnterPress = (e) => {\n//     if (e.key === \"Enter\") {\n//       searchArtists(e);\n//     }\n//   };\n//   return (\n//     <div className=\"input-wrapper\">\n//       <Input\n//         className=\"input-search\"\n//         placeholder=\"Search Artist...\"\n//         size=\"medium\"\n//         onChange={(e) => searchHandler(e)}\n//         fluid\n//         onKeyDown={(e) => handleEnterPress(e)}\n//       />\n//       {/* Might need button for moible */}\n//       {/* <Button onClick={(e) => searchArtists(e)}>Search</Button> */}\n//     </div>\n//   );\n// }\n\n_s(SliderWindow, \"gOdS08kiEwJtwzkp//a/iP6xufA=\");\n\n_c = SliderWindow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderWindow\");","map":{"version":3,"sources":["/Users/balthazarely/Desktop/Development/Projects/react-spotify-playlistMaker/src/components/SliderWindow.jsx"],"names":["React","useState","Input","Loader","SliderWindow","getTopSongsSimilarArtists","sliderWindowOpen","setSliderWindowOpen","playlistName","setPlaylistName","processingPlaylist","setProcessingPlaylist","activeLoader","setActiveLoader","e","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,mBAA9B;AAEA,eAAe,SAASC,YAAT,CAAsB;AACnCC,EAAAA,yBADmC;AAEnCC,EAAAA,gBAFmC;AAGnCC,EAAAA;AAHmC,CAAtB,EAIZ;AAAA;;AACD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AAEA,sBACE;AACE,IAAA,SAAS,EAAG,oBAAmBK,gBAAgB,GAAG,aAAH,GAAmB,EAAG,EADvE;AAAA,cAGGI,kBAAkB,gBACjB;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,MAAM,EAAC,UAAtB;AAAiC,QAAA,IAAI,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADiB,gBAKjB;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,WAAW,EAAC,eAFd;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,QAAQ,EAAGI,CAAD,IAAOL,eAAe,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;AAJlC;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AACE,UAAA,SAAS,EAAE,aADb;AAEE,UAAA,OAAO,EAAE,MAAM;AACbX,YAAAA,yBAAyB,CAACG,YAAD,CAAzB;AACAG,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,YAAAA,eAAe,CAAC,IAAD,CAAf;AACD,WANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AACE,UAAA,SAAS,EAAE,YADb;AAEE,UAAA,OAAO,EAAE,MAAMN,mBAAmB,CAAC,KAAD,CAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAvEwBH,Y;;KAAAA,Y","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Loader } from \"semantic-ui-react\";\n\nexport default function SliderWindow({\n  getTopSongsSimilarArtists,\n  sliderWindowOpen,\n  setSliderWindowOpen,\n}) {\n  const [playlistName, setPlaylistName] = useState(\"\");\n  const [processingPlaylist, setProcessingPlaylist] = useState(false);\n  const [activeLoader, setActiveLoader] = useState(false);\n\n  return (\n    <div\n      className={`slider-container ${sliderWindowOpen ? \"slider-open\" : \"\"}`}\n    >\n      {processingPlaylist ? (\n        <div className=\"controls-after\">\n          <Loader active inline=\"centered\" size=\"big\" />\n        </div>\n      ) : (\n        <div className=\"controls-before\">\n          <h2>Please name playlist</h2>\n          <Input\n            fluid\n            placeholder=\"Playlist name\"\n            size=\"medium\"\n            onChange={(e) => setPlaylistName(e.target.value)}\n          />\n          <div className=\"btn-container\">\n            <button\n              className={\"btn success\"}\n              onClick={() => {\n                getTopSongsSimilarArtists(playlistName);\n                setProcessingPlaylist(true);\n                setActiveLoader(true);\n              }}\n            >\n              Make Playlist\n            </button>\n            <button\n              className={\"btn cancle\"}\n              onClick={() => setSliderWindowOpen(false)}\n            >\n              cancle\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// export default function SearchInput({ searchHandler, searchArtists }) {\n//   const handleEnterPress = (e) => {\n//     if (e.key === \"Enter\") {\n//       searchArtists(e);\n//     }\n//   };\n\n//   return (\n//     <div className=\"input-wrapper\">\n//       <Input\n//         className=\"input-search\"\n//         placeholder=\"Search Artist...\"\n//         size=\"medium\"\n//         onChange={(e) => searchHandler(e)}\n//         fluid\n//         onKeyDown={(e) => handleEnterPress(e)}\n//       />\n//       {/* Might need button for moible */}\n//       {/* <Button onClick={(e) => searchArtists(e)}>Search</Button> */}\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}