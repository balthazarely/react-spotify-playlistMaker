{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/balthazarely/Desktop/Development/Projects/react-spotify-playlistMaker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MainConatiner from \"./components/MainContainer\";\nimport Menu from \"./components/Menu\";\nimport Nav from \"./components/Nav\";\nimport SliderWindow from \"./components/SliderWindow\";\nimport MyArtistContainer from \"./components/MyArtistContainer\";\nimport Spotify from \"./utils/spotify\";\nimport shuffle from \"./utils/helpers\"; // Martin127792\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./styles/app.scss\";\n\nfunction App() {\n  _s();\n\n  const [accessToken, setAccessToken] = useState(null);\n  const [myDetails, setMyDetails] = useState({}); // User infomation\n\n  const [myFavoriteArtists, setMyFavoriteArtists] = useState([]);\n  const [myFavoriteTracks, setMyFavoriteTracks] = useState([]); // Search hanlers\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]); // Apperance\n\n  const [menuOpen, setMenuOpen] = useState(true);\n  const [sliderWindowOpen, setSliderWindowOpen] = useState(false);\n  const [searchPageShowing, setSearchPageShowing] = useState(false);\n\n  const getAccessToken = e => {\n    console.log(\"its going\");\n    const results = Spotify.getAccessToken();\n    setAccessToken(results);\n  }; // On Mount, initialize app\n\n\n  useEffect(() => {\n    const results = Spotify.getAccessToken();\n    setAccessToken(results);\n    Spotify.getMyDetails().then(results => {\n      console.log(results);\n      setMyDetails(results);\n    });\n    Spotify.getUsersTopArtists().then(favArtists => {\n      setMyFavoriteArtists(favArtists);\n    });\n    Spotify.getUsersTopTracks().then(favTracks => {\n      setMyFavoriteTracks(favTracks);\n    });\n  }, []);\n\n  const searchHandler = e => {\n    e.preventDefault();\n    console.log(e.target.value);\n    setSearchTerm(e.target.value);\n  };\n\n  const searchArtists = e => {\n    e.preventDefault();\n    Spotify.searchArtists(searchTerm).then(results => {\n      setSearchResults(results.artists.items);\n      console.log(results.artists.items);\n    });\n  }; // Playlist Making hooks\n\n\n  const [similarArtists, setSimilarArtists] = useState([]); // FROM THE SEED\n\n  const [similarArtistsTrackSeedReco, setSimilarArtistsTrackSeedReco] = useState([]);\n\n  const getSimilarArtists = artistID => {\n    setSliderWindowOpen(true);\n    Spotify.getSimilarArtists(artistID).then(results => {\n      console.log(results);\n      setSimilarArtists(results.artists);\n    });\n  };\n\n  const getTopSongsSimilarArtists = async playListName => {\n    let artistSongArray = [];\n    await similarArtists.map(artist => {\n      Spotify.getTopSongs(artist.id).then(results => {\n        artistSongArray.push(results); // console.log(artistSongArray);\n      });\n    });\n    setTimeout(() => {\n      let flattened = artistSongArray.flat();\n      let mapped = [].concat(...flattened.map(Object.values)); // console.log(mapped, \"this is the final array\");\n\n      let name = playListName;\n      let songURI = shuffle(mapped);\n      Spotify.savePlaylist(name, songURI);\n    }, 2000);\n  }; // THis area is all about the songs in the fav list and using the checkboxes\n\n\n  const getSimilarSongsRecomendations = (artistID, songId) => {// setSliderWindowOpen(true);\n    // Spotify.makePlaylistFromArtistAndSong(artistID, songId).then((results) => {\n    //   console.log(results.tracks);\n    //   setSimilarArtistsTrackSeedReco(results.tracks);\n    // });\n  };\n\n  const [usesTools, setUsesTools] = React.useState([]);\n\n  const updateUsesTools = item => {\n    if (usesTools.includes(item)) {\n      setUsesTools(usesTools.filter(tool => tool != item));\n    } else {\n      setUsesTools([...usesTools, item]); // or push\n    }\n\n    console.log(usesTools);\n  };\n\n  const makePlaylistFromSong = async () => {\n    let array = [];\n    await usesTools.map(item => {\n      Spotify.makePlaylistFromArtistAndSong(item).then(result => {\n        result.tracks.map(item => {\n          console.log(item.uri);\n          array.push(item.uri);\n        });\n      });\n    });\n    setTimeout(() => {\n      let name = \"THIS IS A TEST\";\n      let songURI = shuffle(array);\n      Spotify.savePlaylist(name, songURI);\n    }, 2000);\n  };\n\n  const notify = () => toast.info(\"Playlist Created!\", {\n    position: \"bottom-right\",\n    autoClose: 2000,\n    hideProgressBar: true,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginLeft: \"200px\"\n      },\n      onClick: makePlaylistFromSong,\n      children: \"MAKE PLAYLIST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Nav, {\n      menuOpen: menuOpen,\n      setMenuOpen: setMenuOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), searchPageShowing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainConatiner, {\n        menuOpen: menuOpen,\n        searchHandler: searchHandler,\n        searchArtists: searchArtists,\n        searchResults: searchResults,\n        getSimilarArtists: getSimilarArtists\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SliderWindow, {\n        sliderWindowOpen: sliderWindowOpen,\n        setSliderWindowOpen: setSliderWindowOpen,\n        getTopSongsSimilarArtists: getTopSongsSimilarArtists,\n        notify: notify\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        position: \"bottom-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MyArtistContainer, {\n        menuOpen: menuOpen,\n        accessToken: accessToken,\n        myFavoriteArtists: myFavoriteArtists,\n        myFavoriteTracks: myFavoriteTracks,\n        getSimilarArtists: getSimilarArtists,\n        getSimilarSongsRecomendations: getSimilarSongsRecomendations // new down here\n        ,\n        usesTools: usesTools,\n        updateUsesTools: updateUsesTools\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SliderWindow, {\n        sliderWindowOpen: sliderWindowOpen,\n        setSliderWindowOpen: setSliderWindowOpen,\n        getTopSongsSimilarArtists: getTopSongsSimilarArtists,\n        notify: notify\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        position: \"bottom-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        newestOnTop: false,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        postition: \"fixed\",\n        top: 0,\n        right: 0,\n        backgroundColor: \"red\"\n      },\n      children: usesTools.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      setSliderWindowOpen: setSliderWindowOpen,\n      menuOpen: menuOpen,\n      getAccessToken: getAccessToken,\n      setSearchPageShowing: setSearchPageShowing,\n      myDetails: myDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WwGNqMm9jGwMiG3dHMJqZ0Vm6mM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/balthazarely/Desktop/Development/Projects/react-spotify-playlistMaker/src/App.js"],"names":["React","useState","useEffect","MainConatiner","Menu","Nav","SliderWindow","MyArtistContainer","Spotify","shuffle","ToastContainer","toast","App","accessToken","setAccessToken","myDetails","setMyDetails","myFavoriteArtists","setMyFavoriteArtists","myFavoriteTracks","setMyFavoriteTracks","searchTerm","setSearchTerm","searchResults","setSearchResults","menuOpen","setMenuOpen","sliderWindowOpen","setSliderWindowOpen","searchPageShowing","setSearchPageShowing","getAccessToken","e","console","log","results","getMyDetails","then","getUsersTopArtists","favArtists","getUsersTopTracks","favTracks","searchHandler","preventDefault","target","value","searchArtists","artists","items","similarArtists","setSimilarArtists","similarArtistsTrackSeedReco","setSimilarArtistsTrackSeedReco","getSimilarArtists","artistID","getTopSongsSimilarArtists","playListName","artistSongArray","map","artist","getTopSongs","id","push","setTimeout","flattened","flat","mapped","concat","Object","values","name","songURI","savePlaylist","getSimilarSongsRecomendations","songId","usesTools","setUsesTools","updateUsesTools","item","includes","filter","tool","makePlaylistFromSong","array","makePlaylistFromArtistAndSong","result","tracks","uri","notify","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","marginLeft","postition","top","right","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MainConatiner from \"./components/MainContainer\";\nimport Menu from \"./components/Menu\";\nimport Nav from \"./components/Nav\";\nimport SliderWindow from \"./components/SliderWindow\";\nimport MyArtistContainer from \"./components/MyArtistContainer\";\nimport Spotify from \"./utils/spotify\";\nimport shuffle from \"./utils/helpers\";\n\n// Martin127792\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./styles/app.scss\";\n\nfunction App() {\n  const [accessToken, setAccessToken] = useState(null);\n  const [myDetails, setMyDetails] = useState({});\n\n  // User infomation\n  const [myFavoriteArtists, setMyFavoriteArtists] = useState([]);\n  const [myFavoriteTracks, setMyFavoriteTracks] = useState([]);\n  // Search hanlers\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  // Apperance\n  const [menuOpen, setMenuOpen] = useState(true);\n  const [sliderWindowOpen, setSliderWindowOpen] = useState(false);\n  const [searchPageShowing, setSearchPageShowing] = useState(false);\n\n  const getAccessToken = (e) => {\n    console.log(\"its going\");\n    const results = Spotify.getAccessToken();\n    setAccessToken(results);\n  };\n\n  // On Mount, initialize app\n  useEffect(() => {\n    const results = Spotify.getAccessToken();\n    setAccessToken(results);\n\n    Spotify.getMyDetails().then((results) => {\n      console.log(results);\n      setMyDetails(results);\n    });\n    Spotify.getUsersTopArtists().then((favArtists) => {\n      setMyFavoriteArtists(favArtists);\n    });\n    Spotify.getUsersTopTracks().then((favTracks) => {\n      setMyFavoriteTracks(favTracks);\n    });\n  }, []);\n\n  const searchHandler = (e) => {\n    e.preventDefault();\n    console.log(e.target.value);\n    setSearchTerm(e.target.value);\n  };\n\n  const searchArtists = (e) => {\n    e.preventDefault();\n    Spotify.searchArtists(searchTerm).then((results) => {\n      setSearchResults(results.artists.items);\n      console.log(results.artists.items);\n    });\n  };\n\n  // Playlist Making hooks\n  const [similarArtists, setSimilarArtists] = useState([]);\n  // FROM THE SEED\n  const [\n    similarArtistsTrackSeedReco,\n    setSimilarArtistsTrackSeedReco,\n  ] = useState([]);\n\n  const getSimilarArtists = (artistID) => {\n    setSliderWindowOpen(true);\n    Spotify.getSimilarArtists(artistID).then((results) => {\n      console.log(results);\n      setSimilarArtists(results.artists);\n    });\n  };\n\n  const getTopSongsSimilarArtists = async (playListName) => {\n    let artistSongArray = [];\n    await similarArtists.map((artist) => {\n      Spotify.getTopSongs(artist.id).then((results) => {\n        artistSongArray.push(results);\n        // console.log(artistSongArray);\n      });\n    });\n    setTimeout(() => {\n      let flattened = artistSongArray.flat();\n      let mapped = [].concat(...flattened.map(Object.values));\n      // console.log(mapped, \"this is the final array\");\n      let name = playListName;\n      let songURI = shuffle(mapped);\n      Spotify.savePlaylist(name, songURI);\n    }, 2000);\n  };\n\n  // THis area is all about the songs in the fav list and using the checkboxes\n  const getSimilarSongsRecomendations = (artistID, songId) => {\n    // setSliderWindowOpen(true);\n    // Spotify.makePlaylistFromArtistAndSong(artistID, songId).then((results) => {\n    //   console.log(results.tracks);\n    //   setSimilarArtistsTrackSeedReco(results.tracks);\n    // });\n  };\n\n  const [usesTools, setUsesTools] = React.useState([]);\n  const updateUsesTools = (item) => {\n    if (usesTools.includes(item)) {\n      setUsesTools(usesTools.filter((tool) => tool != item));\n    } else {\n      setUsesTools([...usesTools, item]); // or push\n    }\n    console.log(usesTools);\n  };\n\n  const makePlaylistFromSong = async () => {\n    let array = [];\n    await usesTools.map((item) => {\n      Spotify.makePlaylistFromArtistAndSong(item).then((result) => {\n        result.tracks.map((item) => {\n          console.log(item.uri);\n          array.push(item.uri);\n        });\n      });\n    });\n    setTimeout(() => {\n      let name = \"THIS IS A TEST\";\n      let songURI = shuffle(array);\n      Spotify.savePlaylist(name, songURI);\n    }, 2000);\n  };\n\n  const notify = () =>\n    toast.info(\"Playlist Created!\", {\n      position: \"bottom-right\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n\n  return (\n    <div className=\"App\">\n      <button style={{ marginLeft: \"200px\" }} onClick={makePlaylistFromSong}>\n        MAKE PLAYLIST\n      </button>\n\n      <Nav menuOpen={menuOpen} setMenuOpen={setMenuOpen} />\n      {searchPageShowing ? (\n        <>\n          <MainConatiner\n            menuOpen={menuOpen}\n            searchHandler={searchHandler}\n            searchArtists={searchArtists}\n            searchResults={searchResults}\n            getSimilarArtists={getSimilarArtists}\n          />\n          <SliderWindow\n            sliderWindowOpen={sliderWindowOpen}\n            setSliderWindowOpen={setSliderWindowOpen}\n            getTopSongsSimilarArtists={getTopSongsSimilarArtists}\n            notify={notify}\n          />\n          <ToastContainer\n            position=\"bottom-right\"\n            autoClose={5000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </>\n      ) : (\n        <>\n          <MyArtistContainer\n            menuOpen={menuOpen}\n            accessToken={accessToken}\n            myFavoriteArtists={myFavoriteArtists}\n            myFavoriteTracks={myFavoriteTracks}\n            getSimilarArtists={getSimilarArtists}\n            getSimilarSongsRecomendations={getSimilarSongsRecomendations}\n            // new down here\n            usesTools={usesTools}\n            updateUsesTools={updateUsesTools}\n          />\n          <SliderWindow\n            sliderWindowOpen={sliderWindowOpen}\n            setSliderWindowOpen={setSliderWindowOpen}\n            getTopSongsSimilarArtists={getTopSongsSimilarArtists}\n            notify={notify}\n          />\n          <ToastContainer\n            position=\"bottom-right\"\n            autoClose={5000}\n            hideProgressBar\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </>\n      )}\n      <div\n        style={{ postition: \"fixed\", top: 0, right: 0, backgroundColor: \"red\" }}\n      >\n        {usesTools.map((item) => {\n          return <p>{item}</p>;\n        })}\n      </div>\n      <Menu\n        setSliderWindowOpen={setSliderWindowOpen}\n        menuOpen={menuOpen}\n        getAccessToken={getAccessToken}\n        setSearchPageShowing={setSearchPageShowing}\n        myDetails={myDetails}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}